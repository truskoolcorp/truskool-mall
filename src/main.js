import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js';\nimport { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory.js';\n\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x8fbcd4);\n\n// User/group that will move when teleporting (camera sits inside)\nconst user = new THREE.Group();\nscene.add(user);\n\nconst camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.set(0, 1.6, 3);\nuser.add(camera);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.xr.enabled = true;\ndocument.body.appendChild(renderer.domElement);\n\n// VRButton (enter/exit VR)\ndocument.body.appendChild(VRButton.createButton(renderer));\n\n// OrbitControls for desktop testing\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.target.set(0, 1.6, 0);\ncontrols.update();\n\n// Lighting\nconst hemi = new THREE.HemisphereLight(0xffffff, 0x444444, 1.0);\nhemi.position.set(0, 50, 0);\nscene.add(hemi);\n\nconst dir = new THREE.DirectionalLight(0xffffff, 0.6);\ndir.position.set(-3, 10, -10);\ndir.castShadow = true;\nscene.add(dir);\n\n// Floor / mall ground\nconst floorGeo = new THREE.PlaneGeometry(200, 200);\nconst floorMat = new THREE.MeshStandardMaterial({ color: 0x999999, roughness: 0.9, metalness: 0.0 });\nconst floor = new THREE.Mesh(floorGeo, floorMat);\nfloor.rotation.x = -Math.PI / 2;\nfloor.receiveShadow = true;\nfloor.name = 'floor';\nscene.add(floor);\n\n// Simple mall "halls" demo: a few boxes as shops (placeholder)\nconst shopGeo = new THREE.BoxGeometry(4, 3, 4);\nconst shopMat = new THREE.MeshStandardMaterial({ color: 0xffffff });\nfor (let i = -2; i <= 2; ++i) {\n  const m = new THREE.Mesh(shopGeo, shopMat.clone());\n  m.position.set(i * 6, 1.5, -8);\n  m.material.color.setHSL((i + 3) / 8, 0.5, 0.6);\n  scene.add(m);\n}\n\n// GLTF loader example (drop models into /public/assets/)\nconst loader = new GLTFLoader();\nloader.load('/assets/mall_centerpiece.glb', (g) => {\n  g.scene.position.set(0, 0, 0);\n  scene.add(g.scene);\n}, undefined, (e) => {\n  console.warn('GLTF load error (ok if file missing in starter):', e);\n});\n\n// Teleportation (simple point-and-teleport using controller ray)\nconst tempMatrix = new THREE.Matrix4();\nconst raycaster = new THREE.Raycaster();\nconst teleportMarker = new THREE.Mesh(\n  new THREE.CircleGeometry(0.35, 32).rotateX(-Math.PI/2),\n  new THREE.MeshBasicMaterial({ color: 0x00ffcc, opacity: 0.85, transparent: true })\n);\nteleportMarker.visible = false;\nscene.add(teleportMarker);\n\nfunction setTeleportVisible(hitPoint) {\n  teleportMarker.position.copy(hitPoint);\n  teleportMarker.position.y += 0.01;\n  teleportMarker.visible = true;\n}\n\nfunction hideTeleport() {\n  teleportMarker.visible = false;\n}\n\n// Controllers\nconst controller1 = renderer.xr.getController(0);\nscene.add(controller1);\nconst controller2 = renderer.xr.getController(1);\nscene.add(controller2);\n\n// Controller visuals (model)\nconst controllerModelFactory = new XRControllerModelFactory();\nconst grip1 = renderer.xr.getControllerGrip(0);\ngrip1.add(controllerModelFactory.createControllerModel(grip1));\nscene.add(grip1);\nconst grip2 = renderer.xr.getControllerGrip(1);\ngrip2.add(controllerModelFactory.createControllerModel(grip2));\nscene.add(grip2);\n\n// Helper line to show ray from controller (simple)\nfunction makePointerLine() {\n  const g = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0,0,0), new THREE.Vector3(0,0,-1)]);\n  const m = new THREE.LineBasicMaterial({ color: 0xffffff });\n  const line = new THREE.Line(g, m);\n  line.name = 'pointer';\n  line.scale.z = 10;\n  return line;\n}\ncontroller1.add(makePointerLine());\ncontroller2.add(makePointerLine());\n\nlet teleportCandidate = null;\n\nfunction onSelectStart(event) {\n  // begin pointing: check floor intersection from controller\n  const controller = event.target;\n  tempMatrix.identity().extractRotation(controller.matrixWorld);\n  const origin = new THREE.Vector3().setFromMatrixPosition(controller.matrixWorld);\n  const direction = new THREE.Vector3(0, 0, -1).applyMatrix4(tempMatrix).sub(origin).normalize();\n\n  raycaster.set(origin, direction);\n  const intersects = raycaster.intersectObject(floor, false);\n  if (intersects.length > 0) {\n    teleportCandidate = intersects[0].point.clone();\n    setTeleportVisible(teleportCandidate);\n  } else {\n    teleportCandidate = null;\n    hideTeleport();\n  }\n}\n\nfunction onSelectEnd() {\n  if (teleportCandidate) {\n    // move user group so camera height remains ~1.6\n    const offsetY = camera.position.y;\n    user.position.set(teleportCandidate.x, teleportCandidate.y, teleportCandidate.z);\n    user.position.y += 0; // floor already at y=0\n    teleportCandidate = null;\n    hideTeleport();\n  }\n}\n\ncontroller1.addEventListener('selectstart', onSelectStart);\ncontroller1.addEventListener('selectend', onSelectEnd);\ncontroller2.addEventListener('selectstart', onSelectStart);\ncontroller2.addEventListener('selectend', onSelectEnd);\n\n// Animation loop\nrenderer.setAnimationLoop(() => {\n  renderer.render(scene, camera);\n});\n\nwindow.addEventListener('resize', onWindowResize);\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}